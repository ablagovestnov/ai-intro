#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Traffic Parser Application
"""

import os
from traffic_parser_app import TrafficParserApp

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = TrafficParserApp()
    
    print("üöÄ Traffic Parser Application - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        app.initialize_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PCAP —Ñ–∞–π–ª–æ–≤
    pcap_dir = app.config.PCAP_DIRECTORY
    print(f"\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å PCAP —Ñ–∞–π–ª–∞–º–∏: {pcap_dir}")
    
    if not os.path.exists(pcap_dir):
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {pcap_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ PCAP —Ñ–∞–π–ª—ã")
        return
    
    pcap_files = [f for f in os.listdir(pcap_dir) if f.lower().endswith(('.pcap', '.pcapng'))]
    
    if not pcap_files:
        print(f"‚ö†Ô∏è  –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {pcap_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PCAP —Ñ–∞–π–ª–æ–≤")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ PCAP —Ñ–∞–π–ª—ã –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pcap_files)} PCAP —Ñ–∞–π–ª–æ–≤:")
    for file in pcap_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
        print(f"   - {file}")
    if len(pcap_files) > 5:
        print(f"   ... –∏ –µ—â–µ {len(pcap_files) - 5} —Ñ–∞–π–ª–æ–≤")
    
    # 3. –ü–∞—Ä—Å–∏–Ω–≥ PCAP —Ñ–∞–π–ª–æ–≤
    print(f"\n3. –ü–∞—Ä—Å–∏–Ω–≥ PCAP —Ñ–∞–π–ª–æ–≤...")
    try:
        packets_data = app.parse_pcap_files()
        
        if not packets_data:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∞–∫–µ—Ç—ã –∏–∑ PCAP —Ñ–∞–π–ª–æ–≤")
            return
        
        print(f"‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(packets_data)} –ø–∞–∫–µ—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
        protocols = {}
        for packet in packets_data:
            protocol = packet.get('protocol', 'Unknown')
            protocols[protocol] = protocols.get(protocol, 0) + 1
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º:")
        for protocol, count in sorted(protocols.items(), key=lambda x: x[1], reverse=True):
            print(f"   {protocol}: {count} –ø–∞–∫–µ—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return
    
    # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print(f"\n4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try:
        success = app.save_to_database(packets_data)
        if success:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return
    
    # 5. –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
    print(f"\n5. –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON...")
    try:
        success = app.export_to_json(include_statistics=True)
        if success:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {app.config.OUTPUT_JSON_FILE}")
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {app.config.OUTPUT_JSON_FILE.replace('.json', '_statistics.json')}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    print(f"\n6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ TCP —Ç—Ä–∞—Ñ–∏–∫—É
    tcp_filters = {'protocol': 'TCP'}
    print("   –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è TCP —Ç—Ä–∞—Ñ–∏–∫–∞...")
    try:
        success = app.export_to_json(filters=tcp_filters)
        if success:
            tcp_output = app.config.OUTPUT_JSON_FILE.replace('.json', '_tcp_filtered.json')
            print(f"‚úÖ TCP —Ç—Ä–∞—Ñ–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {tcp_output}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ TCP: {e}")
    
    print("\nüéâ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\n–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–º. README.md")
    print("–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CLI –∫–æ–º–∞–Ω–¥—ã:")
    print("  python traffic_parser_app.py parse --help")
    print("  python traffic_parser_app.py export --help")

if __name__ == "__main__":
    main()
