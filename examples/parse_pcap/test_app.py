#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Traffic Parser Application
"""

import os
import sys
import tempfile
import shutil
from scapy.all import Ether, IP, TCP, Raw, wrpcap

def create_sample_pcap():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PCAP —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏."""
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    packets = []
    
    # HTTP –∑–∞–ø—Ä–æ—Å
    http_packet = Ether() / IP(src="192.168.1.100", dst="192.168.1.1") / TCP(sport=12345, dport=80) / Raw(b"GET / HTTP/1.1\r\nHost: example.com\r\n\r\n")
    packets.append(http_packet)
    
    # HTTPS –∑–∞–ø—Ä–æ—Å
    https_packet = Ether() / IP(src="192.168.1.100", dst="8.8.8.8") / TCP(sport=12346, dport=443) / Raw(b"CONNECT example.com:443 HTTP/1.1\r\n\r\n")
    packets.append(https_packet)
    
    # DNS –∑–∞–ø—Ä–æ—Å
    dns_packet = Ether() / IP(src="192.168.1.100", dst="8.8.8.8") / TCP(sport=12347, dport=53) / Raw(b"DNS query data")
    packets.append(dns_packet)
    
    # UDP –ø–∞–∫–µ—Ç
    udp_packet = Ether() / IP(src="192.168.1.200", dst="192.168.1.1") / TCP(sport=12348, dport=8080) / Raw(b"UDP data")
    packets.append(udp_packet)
    
    # ICMP –ø–∞–∫–µ—Ç
    icmp_packet = Ether() / IP(src="192.168.1.100", dst="192.168.1.1") / TCP(sport=12349, dport=0) / Raw(b"ICMP ping")
    packets.append(icmp_packet)
    
    return packets

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Traffic Parser Application")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    temp_dir = tempfile.mkdtemp()
    test_pcap_dir = os.path.join(temp_dir, "test_pcaps")
    os.makedirs(test_pcap_dir)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ PCAP —Ñ–∞–π–ª—ã
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö PCAP —Ñ–∞–π–ª–æ–≤...")
        packets = create_sample_pcap()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
        test_files = []
        for i, packet in enumerate(packets):
            filename = f"test_packet_{i+1}.pcap"
            filepath = os.path.join(test_pcap_dir, filename)
            wrpcap(filepath, [packet])
            test_files.append(filename)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω {filename}")
        
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö PCAP —Ñ–∞–π–ª–æ–≤ –≤ {test_pcap_dir}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            from pcap_parser import PCAPParser
            
            parser = PCAPParser()
            parsed_packets = parser.parse_directory(test_pcap_dir)
            
            print(f"   ‚úÖ –ü–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª {len(parsed_packets)} –ø–∞–∫–µ—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            protocols = {}
            for packet in parsed_packets:
                protocol = packet.get('protocol', 'Unknown')
                protocols[protocol] = protocols.get(protocol, 0) + 1
            
            print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º:")
            for protocol, count in protocols.items():
                print(f"      {protocol}: {count} –ø–∞–∫–µ—Ç–æ–≤")
                
        except ImportError as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
            return
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from database import DatabaseHandler
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
            test_db_path = os.path.join(temp_dir, "test.db")
            db_handler = DatabaseHandler(f"sqlite:///{test_db_path}")
            db_handler.create_tables()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç—ã
            session = db_handler.get_session()
            db_handler.add_packets_batch(session, parsed_packets)
            session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            all_packets = db_handler.get_all_packets(session)
            print(f"   ‚úÖ –í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_packets)} –ø–∞–∫–µ—Ç–æ–≤")
            
            session.close()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —ç–∫—Å–ø–æ—Ä—Ç
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        
        try:
            from json_exporter import JSONExporter
            
            test_json_path = os.path.join(temp_dir, "test_export.json")
            exporter = JSONExporter(test_json_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            packets_data = db_handler.export_to_dict(all_packets)
            success = exporter.export_packets(packets_data)
            
            if success:
                print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {test_json_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(test_json_path)
                print(f"   üìÑ –†–∞–∑–º–µ—Ä JSON —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   - –¢–µ—Å—Ç–æ–≤—ã–µ PCAP —Ñ–∞–π–ª—ã: {test_pcap_dir}")
        print(f"   - –¢–µ—Å—Ç–æ–≤–∞—è –ë–î: {test_db_path}")
        print(f"   - JSON —ç–∫—Å–ø–æ—Ä—Ç: {test_json_path}")
        
        print("\nüöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ PCAP —Ñ–∞–π–ª–∞–º–∏:")
        print("1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ PCAP —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é pcap_files/")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python traffic_parser_app.py parse")
        print("3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ: python traffic_parser_app.py export")
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        shutil.rmtree(temp_dir)
        print("   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()
